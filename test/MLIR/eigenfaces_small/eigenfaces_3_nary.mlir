module {
  func.func private @encryptedEigenfaces(%arg0: tensor<4x!fhe.secret<f64>>, %arg1: tensor<4x4x!fhe.secret<f64>>) -> tensor<4x!fhe.secret<f64>> {
    %c3 = arith.constant 3 : index
    %c2 = arith.constant 2 : index
    %c1 = arith.constant 1 : index
    %c0 = arith.constant 0 : index
    %0 = linalg.init_tensor [4] : tensor<4x!fhe.secret<f64>>
    %1 = tensor.extract %arg1[%c0, %c0] : tensor<4x4x!fhe.secret<f64>>
    %2 = fhe.multiply(%1, %1) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %3 = tensor.extract %arg0[%c0] : tensor<4x!fhe.secret<f64>>
    %4 = fhe.multiply(%3, %3) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %5 = fhe.sub(%2, %4) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %6 = tensor.extract %arg1[%c0, %c1] : tensor<4x4x!fhe.secret<f64>>
    %7 = fhe.multiply(%6, %6) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %8 = tensor.extract %arg0[%c1] : tensor<4x!fhe.secret<f64>>
    %9 = fhe.multiply(%8, %8) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %10 = fhe.sub(%7, %9) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %11 = tensor.extract %arg1[%c0, %c2] : tensor<4x4x!fhe.secret<f64>>
    %12 = fhe.multiply(%11, %11) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %13 = tensor.extract %arg0[%c2] : tensor<4x!fhe.secret<f64>>
    %14 = fhe.multiply(%13, %13) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %15 = fhe.sub(%12, %14) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %16 = tensor.extract %arg1[%c0, %c3] : tensor<4x4x!fhe.secret<f64>>
    %17 = fhe.multiply(%16, %16) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %18 = tensor.extract %arg0[%c3] : tensor<4x!fhe.secret<f64>>
    %19 = fhe.multiply(%18, %18) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %20 = fhe.sub(%17, %19) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %21 = fhe.add(%20, %15, %5, %10) : (!fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %22 = tensor.insert %21 into %0[%c0] : tensor<4x!fhe.secret<f64>>
    %23 = tensor.extract %arg1[%c1, %c0] : tensor<4x4x!fhe.secret<f64>>
    %24 = fhe.multiply(%23, %23) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %25 = fhe.sub(%24, %4) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %26 = tensor.extract %arg1[%c1, %c1] : tensor<4x4x!fhe.secret<f64>>
    %27 = fhe.multiply(%26, %26) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %28 = fhe.sub(%27, %9) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %29 = tensor.extract %arg1[%c1, %c2] : tensor<4x4x!fhe.secret<f64>>
    %30 = fhe.multiply(%29, %29) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %31 = fhe.sub(%30, %14) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %32 = tensor.extract %arg1[%c1, %c3] : tensor<4x4x!fhe.secret<f64>>
    %33 = fhe.multiply(%32, %32) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %34 = fhe.sub(%33, %19) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %35 = fhe.add(%34, %31, %25, %28) : (!fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %36 = tensor.insert %35 into %22[%c1] : tensor<4x!fhe.secret<f64>>
    %37 = tensor.extract %arg1[%c2, %c0] : tensor<4x4x!fhe.secret<f64>>
    %38 = fhe.multiply(%37, %37) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %39 = fhe.sub(%38, %4) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %40 = tensor.extract %arg1[%c2, %c1] : tensor<4x4x!fhe.secret<f64>>
    %41 = fhe.multiply(%40, %40) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %42 = fhe.sub(%41, %9) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %43 = tensor.extract %arg1[%c2, %c2] : tensor<4x4x!fhe.secret<f64>>
    %44 = fhe.multiply(%43, %43) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %45 = fhe.sub(%44, %14) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %46 = tensor.extract %arg1[%c2, %c3] : tensor<4x4x!fhe.secret<f64>>
    %47 = fhe.multiply(%46, %46) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %48 = fhe.sub(%47, %19) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %49 = fhe.add(%48, %45, %39, %42) : (!fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %50 = tensor.insert %49 into %36[%c2] : tensor<4x!fhe.secret<f64>>
    %51 = tensor.extract %arg1[%c3, %c0] : tensor<4x4x!fhe.secret<f64>>
    %52 = fhe.multiply(%51, %51) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %53 = fhe.sub(%52, %4) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %54 = tensor.extract %arg1[%c3, %c1] : tensor<4x4x!fhe.secret<f64>>
    %55 = fhe.multiply(%54, %54) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %56 = fhe.sub(%55, %9) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %57 = tensor.extract %arg1[%c3, %c2] : tensor<4x4x!fhe.secret<f64>>
    %58 = fhe.multiply(%57, %57) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %59 = fhe.sub(%58, %14) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %60 = tensor.extract %arg1[%c3, %c3] : tensor<4x4x!fhe.secret<f64>>
    %61 = fhe.multiply(%60, %60) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %62 = fhe.sub(%61, %19) : (!fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %63 = fhe.add(%62, %59, %53, %56) : (!fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>, !fhe.secret<f64>) -> !fhe.secret<f64>
    %64 = tensor.insert %63 into %50[%c3] : tensor<4x!fhe.secret<f64>>
    return %64 : tensor<4x!fhe.secret<f64>>
  }
}

