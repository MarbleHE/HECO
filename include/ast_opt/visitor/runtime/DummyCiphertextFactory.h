#ifndef GRAPHNODE_H_INCLUDE_AST_OPT_VISITOR_RUNTIME_DUMMYCIPHERTEXTFACTORY_H_
#define GRAPHNODE_H_INCLUDE_AST_OPT_VISITOR_RUNTIME_DUMMYCIPHERTEXTFACTORY_H_

#include <memory>
#include "ast_opt/visitor/runtime/AbstractCiphertextFactory.h"

#ifdef HAVE_SEAL_BFV
#include <seal/seal.h>


class DummyCiphertextFactory : public AbstractCiphertextFactory {
 private:
  /// The number of slots (i.e., maximum no. of elements) in a ciphertext.
  const unsigned int ciphertextSlotSize = 16'384;

  /// Fills a given vector with its last element until it has ciphertextSlotSize elements.
  /// \tparam T The type of the elements that should be encoded in the ciphertext.
  /// \param values The vector that should be expanded by its last element.
  /// \throws std::runtime_error if the number of elements in values is larger than the size defined in
  /// ciphertextSlotSize.
  template<typename T>
  std::vector<T> expandVector(const std::vector<T> &values) const;

 public:
  DummyCiphertextFactory() = default;

  explicit DummyCiphertextFactory(unsigned int numElementsPerCiphertextSlot);

  DummyCiphertextFactory(const DummyCiphertextFactory &other); // copy constructor

  DummyCiphertextFactory(DummyCiphertextFactory &&other) noexcept;  // copy assignment

  DummyCiphertextFactory &operator=(const DummyCiphertextFactory &other);  // move constructor

  DummyCiphertextFactory &operator=(DummyCiphertextFactory &&other) noexcept;  // move assignment


  /// Gets the number of ciphertext slots that each ciphertext generated by this factory consists of.
  /// \return The number of total slots in each ciphertext.
  [[nodiscard]] unsigned int getCiphertextSlotSize() const;

  /// Creates a new seal::Plaintext that encodes the given data (vector value) using the defined encoder.
  /// \param value The values to be encoded into the new plaintext.
  /// \return (A std::unique_ptr) to the newly created seal::Plaintext.
  std::unique_ptr<seal::Plaintext> createPlaintext(const std::vector<int> &value) const;

  /// Creates a new seal::Plaintext object that encodes the given value. Remaining slots in the plaintext are filled up
  /// with the last given value.
  /// \param value The values to be encoded in the plaintext.
  /// \return (A std::unique_ptr to) the seal::Plaintext that encodes the given values.
  std::unique_ptr<seal::Plaintext> createPlaintext(const std::vector<int64_t> &value) const;

  /// Creates a new seal::Plaintext object that encodes the given value. Remaining slots in the plaintext are filled up
  /// with the same value.
  /// \param value The value to be encoded in the plaintext.
  /// \return (A std::unique_ptr to) the seal::Plaintext that encodes the given value.
  std::unique_ptr<seal::Plaintext> createPlaintext(int64_t value) const;

  std::unique_ptr<AbstractCiphertext> createCiphertext(const std::vector<int64_t> &data)  const override;

  std::unique_ptr<AbstractCiphertext> createCiphertext(int64_t data)  const override;

  void decryptCiphertext(AbstractCiphertext &abstractCiphertext, std::vector<int64_t> &ciphertextData)  const override;

  std::string getString(AbstractCiphertext &abstractCiphertext)  const override;

  std::unique_ptr<AbstractCiphertext> createCiphertext(std::unique_ptr<AbstractValue> &&abstractValue)  const override;

  std::unique_ptr<AbstractCiphertext> createCiphertext(const std::vector<int> &data)  const override;
};

#endif

#endif //AST_OPTIMIZER_INCLUDE_AST_OPT_VISITOR_RUNTIME_DUMMYCIPHERTEXTFACTORY_H_
